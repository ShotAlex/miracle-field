'use client';

import { useState, useEffect } from 'react';
import Header from '../components/Header';
import Footer from '../components/Footer';
import Wheel from '../components/Wheel';
import NamesList from '../components/NamesList';
import NameInput from '../components/NameInput';
import Confetti from '../components/Confetti';

interface Person {
  id: string;
  name: string;
  isSelected: boolean;
}

export default function Home() {
  const [people, setPeople] = useState<Person[]>([]);
  const [selectedPersonId, setSelectedPersonId] = useState<string | null>(null);
  const [justSelectedId, setJustSelectedId] = useState<string | null>(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedPeople = localStorage.getItem('miracle-field-people');
    if (savedPeople) {
      try {
        const parsedPeople = JSON.parse(savedPeople);
        setPeople(parsedPeople);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π
  useEffect(() => {
    if (people.length > 0) {
      localStorage.setItem('miracle-field-people', JSON.stringify(people));
    }
  }, [people]);

  const addName = (name: string) => {
    const newPerson: Person = {
      id: Date.now().toString(),
      name,
      isSelected: false,
    };
    setPeople(prev => [...prev, newPerson]);
  };

  const deleteName = (id: string) => {
    setPeople(prev => prev.filter(person => person.id !== id));
    if (selectedPersonId === id) {
      setSelectedPersonId(null);
    }
  };

  const editName = (id: string, newName: string) => {
    setPeople(prev =>
      prev.map(person =>
        person.id === id ? { ...person, name: newName } : person
      )
    );
  };

  const handlePersonSelected = (personId: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É (—Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ)
    setJustSelectedId(personId);
    setSelectedPersonId(personId);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏! üéä
    setShowConfetti(true);
    
    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É, –¥–µ–ª–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—é—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    setTimeout(() => {
      setPeople(prev =>
        prev.map(person =>
          person.id === personId ? { ...person, isSelected: true } : person
        )
      );
      setJustSelectedId(null);
      // –ù–ï —É–±–∏—Ä–∞–µ–º selectedPersonId - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—é—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    }, 2000);
  };

  const handleSpinStart = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
    setSelectedPersonId(null);
    setJustSelectedId(null);
  };

  const resetAllSelections = () => {
    setPeople(prev =>
      prev.map(person => ({ ...person, isSelected: false }))
    );
    setSelectedPersonId(null);
    setJustSelectedId(null);
  };

  const clearAllNames = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?')) {
      setPeople([]);
      setSelectedPersonId(null);
      setJustSelectedId(null);
      localStorage.removeItem('miracle-field-people');
    }
  };

  return (
    <div className="app">
      <Header />
      
      <main className="main">
        <div className="container">
          <div className="game-area">
            <div className="wheel-section">
              <Wheel
                people={people}
                onPersonSelected={handlePersonSelected}
                isSpinning={isSpinning}
                setIsSpinning={setIsSpinning}
                onSpinStart={handleSpinStart}
                selectedPersonId={selectedPersonId}
              />
            </div>
            
            <div className="names-section">
              <div className="names-controls">
                <NameInput onAddName={addName} />
                
                <div className="control-buttons">
                  <button
                    onClick={resetAllSelections}
                    className="control-button reset"
                    disabled={people.every(p => !p.isSelected)}
                  >
                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä—ã
                  </button>
                  <button
                    onClick={clearAllNames}
                    className="control-button clear"
                    disabled={people.length === 0}
                  >
                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                  </button>
                </div>
              </div>
              
              <NamesList
                people={people}
                onDeleteName={deleteName}
                onEditName={editName}
                selectedPersonId={selectedPersonId}
                justSelectedId={justSelectedId}
              />
            </div>
          </div>
        </div>
      </main>
      
      <Footer />
      
      <Confetti 
        isActive={showConfetti} 
        onComplete={() => setShowConfetti(false)}
      />
    </div>
  );
}
