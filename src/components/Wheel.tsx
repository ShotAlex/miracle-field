'use client';

import { useState } from 'react';

interface Person {
  id: string;
  name: string;
  isSelected: boolean;
}

interface WheelProps {
  people: Person[];
  onPersonSelected: (personId: string) => void;
  isSpinning: boolean;
  setIsSpinning: (spinning: boolean) => void;
  onSpinStart?: () => void;
  selectedPersonId?: string | null;
}

export default function Wheel({ people, onPersonSelected, isSpinning, setIsSpinning, onSpinStart, selectedPersonId }: WheelProps) {
  const [rotation, setRotation] = useState(0);
  const [highlightedSector, setHighlightedSector] = useState(-1);
  const [isFineTuning, setIsFineTuning] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö –ª—é–¥–µ–π –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
  const totalSectors = people.length;
  const availablePeople = people.filter(person => !person.isSelected);
  const sectorAngle = totalSectors > 0 ? 360 / totalSectors : 0;

  const spin = () => {
    if (people.length < 2 || availablePeople.length === 0 || isSpinning) return;
    
    // –°–æ–æ–±—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –æ –Ω–∞—á–∞–ª–µ –≤—Ä–∞—â–µ–Ω–∏—è (–¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏)
    onSpinStart?.();
    
    setIsSpinning(true);
    
    // –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç 3 –¥–æ 6 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –ø–ª—é—Å —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const minSpins = 3;
    const maxSpins = 6;
    const spins = Math.random() * (maxSpins - minSpins) + minSpins;
    
    // –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª (0-360 –≥—Ä–∞–¥—É—Å–æ–≤)
    const randomFinalAngle = Math.random() * 360;
    
    // –û–±—â–∏–π –ø–æ–≤–æ—Ä–æ—Ç
    const totalRotation = spins * 360 + randomFinalAngle;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    let finalRotationValue = 0;
    setRotation(prev => {
      finalRotationValue = prev + totalRotation;
      return finalRotationValue;
    });
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
    let interval: NodeJS.Timeout;
    if (people.length > 0) {
      interval = setInterval(() => {
        setHighlightedSector(prev => (prev + 1) % totalSectors);
      }, 100);
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      clearInterval(interval);
      setIsSpinning(false);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π wheel-pointer
      // –°—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤–≤–µ—Ä—Ö (12 —á–∞—Å–æ–≤, –ø–æ–∑–∏—Ü–∏—è -90¬∞ –≤ SVG –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –±–∞—Ä–∞–±–∞–Ω–∞
      let finalAngle = finalRotationValue % 360;
      if (finalAngle < 0) finalAngle += 360;
      
      // –õ–æ–≥–∏–∫–∞:
      // - –°–µ–∫—Ç–æ—Ä–∞ —Ä–∏—Å—É—é—Ç—Å—è –Ω–∞—á–∏–Ω–∞—è —Å -90¬∞ (—Å–µ–∫—Ç–æ—Ä 0 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π)
      // - –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ finalAngle, –∫–∞–∂–¥—ã–π —Å–µ–∫—Ç–æ—Ä —Å–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ —ç—Ç—É –≤–µ–ª–∏—á–∏–Ω—É
      // - –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –∫–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ -90¬∞ (–ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π)
      
      // –ö–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —Å–µ–π—á–∞—Å –≤ –ø–æ–∑–∏—Ü–∏–∏ -90¬∞?
      // –≠—Ç–æ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –≤ –ø–æ–∑–∏—Ü–∏–∏ (-90¬∞ - finalAngle)
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É —É–≥–ª—É –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ–∫—Ç–æ—Ä
      let targetAngle = (-90 - finalAngle + 360) % 360;
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —É–≥–æ–ª –≤ –∏–Ω–¥–µ–∫—Å —Å–µ–∫—Ç–æ—Ä–∞ (—Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å -90¬∞, —Ç.–µ. –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 90¬∞)
      let normalizedAngle = (targetAngle + 90) % 360;
      const sectorIndex = Math.floor(normalizedAngle / sectorAngle) % totalSectors;
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º)
      console.log('–†–∞—Å—á–µ—Ç —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π wheel-pointer (–°–í–ï–†–•–£):', {
        finalRotationValue,
        finalAngle,
        targetAngle,
        normalizedAngle,
        sectorAngle,
        sectorIndex,
        totalSectors,
        selectedPersonName: people[sectorIndex]?.name
      });
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π
      const selectedPerson = people[sectorIndex];
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π
      setHighlightedSector(sectorIndex);
      
      console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π:', {
        selectedPerson: selectedPerson?.name,
        isSelected: selectedPerson?.isSelected,
        sectorIndex,
        shouldLookForAnother: !selectedPerson || selectedPerson.isSelected,
        allPeople: people.map((p, i) => ({ index: i, name: p.name, isSelected: p.isSelected }))
      });
      
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∏—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
      let finalSelectedPerson: Person | undefined = selectedPerson;
      let needsSpinToAvailable = false;
      
      if (!selectedPerson || selectedPerson.isSelected) {
        console.log('üö® –£–ß–ê–°–¢–ù–ò–ö –ü–û–î –°–¢–†–ï–õ–ö–û–ô –£–ñ–ï –í–´–ë–†–ê–ù! –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ...');
        console.log('–ü—Ä–∏—á–∏–Ω–∞:', {
          noSelectedPerson: !selectedPerson,
          isAlreadySelected: selectedPerson?.isSelected,
          personDetails: selectedPerson
        });
        needsSpinToAvailable = true;
        
        // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –¥–≤–∏–≥–∞—è—Å—å –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
        let targetIndex = -1;
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫—Ä—É–≥—É –Ω–∞–∑–∞–¥ (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π) –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        console.log(`üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö —Å –∏–Ω–¥–µ–∫—Å–∞ ${sectorIndex}, –≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${people.length}`);
        for (let i = 1; i < people.length; i++) {
          const checkIndex = (sectorIndex - i + people.length) % people.length;
          const checkPerson = people[checkIndex];
          console.log(`–®–∞–≥ ${i}: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å ${checkIndex}: ${checkPerson?.name}, –≤—ã–±—Ä–∞–Ω: ${checkPerson?.isSelected}`);
          
          if (checkPerson && !checkPerson.isSelected) {
            targetIndex = checkIndex;
            finalSelectedPerson = checkPerson;
            console.log(`‚úÖ –ù–ê–ô–î–ï–ù –ü–ï–†–í–´–ô –î–û–°–¢–£–ü–ù–´–ô: ${finalSelectedPerson.name} (–∏–Ω–¥–µ–∫—Å ${targetIndex})`);
            console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥: ${i}, —ç—Ç–æ ${i} —Å–µ–∫—Ç–æ—Ä(–æ–≤) –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏`);
            break;
          }
        }
        
        if (targetIndex === -1) {
          console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –î–û–°–¢–£–ü–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í');
        }
      }
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
      console.log('üéØ –ü–†–ò–ù–ò–ú–ê–ï–ú –†–ï–®–ï–ù–ò–ï:', {
        needsSpinToAvailable,
        hasFinalSelectedPerson: !!finalSelectedPerson,
        finalPersonName: finalSelectedPerson?.name,
        finalPersonIsSelected: finalSelectedPerson?.isSelected,
        willSpin: needsSpinToAvailable && finalSelectedPerson && !finalSelectedPerson.isSelected
      });
      
      if (needsSpinToAvailable && finalSelectedPerson && !finalSelectedPerson.isSelected) {
        console.log('üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –î–û–ö–†–£–¢–ö–£ –∫ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:', finalSelectedPerson.name);
        
        // –î–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        setTimeout(() => {
          const targetIndex = people.findIndex(p => p.id === finalSelectedPerson.id);
          
          console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—Ä—É—Ç–∫–∏:', {
            currentIndex: sectorIndex,
            targetIndex,
            currentSectorAngle: sectorIndex * sectorAngle,
            targetSectorAngle: targetIndex * sectorAngle
          });
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
          // targetIndex —É–∂–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–∏–∫–ª–µ –ø–æ–∏—Å–∫–∞, —ç—Ç–æ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
          
          // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥ (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π) –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ
          let stepsBack;
          if (targetIndex < sectorIndex) {
            stepsBack = sectorIndex - targetIndex;
          } else {
            // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π "–≤–ø–µ—Ä–µ–¥–∏" –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∑–Ω–∞—á–∏—Ç –º—ã –∏–¥–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
            stepsBack = sectorIndex + (people.length - targetIndex);
          }
          
          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∞–¥—É—Å—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ = –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)
          const rotationNeeded = stepsBack * sectorAngle;
          
          console.log('üîß –î–û–ö–†–£–¢–ö–ê:', {
            currentIndex: sectorIndex,
            targetIndex,
            stepsBack,
            rotationNeeded,
            targetPersonName: finalSelectedPerson?.name
          });
          
          // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º fine-tuning
          setIsFineTuning(true);
          
          // –ü–ª–∞–≤–Ω–æ –¥–æ–∫—Ä—É—á–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω
          setRotation(prev => {
            console.log('üé≤ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω –Ω–∞', rotationNeeded, '–≥—Ä–∞–¥—É—Å–æ–≤');
            return prev + rotationNeeded;
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ–∫—Ç–æ—Ä
          setHighlightedSector(targetIndex);
          
          // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–∫—Ä—É—Ç–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
          setTimeout(() => {
            console.log('‚úÖ –î–û–ö–†–£–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê, –≤—ã–±–∏—Ä–∞–µ–º:', finalSelectedPerson.name);
            setIsFineTuning(false);
            setHighlightedSector(-1);
            onPersonSelected(finalSelectedPerson.id);
          }, 1500);
        }, 1000);
        
      } else if (finalSelectedPerson && !finalSelectedPerson.isSelected) {
        // –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
        console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–∞–∑—É:', finalSelectedPerson.name);
        setTimeout(() => {
          setHighlightedSector(-1);
          onPersonSelected(finalSelectedPerson.id);
        }, 1000);
        
      } else {
        // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        console.log('‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í');
        setTimeout(() => {
          setHighlightedSector(-1);
        }, 1000);
      }
    }, 4000);
  };

  const getSectorColor = (index: number) => {
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4',
      '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F',
      '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA'
    ];
    return colors[index % colors.length];
  };

  return (
    <div className="wheel-container">
      <div className="wheel-wrapper">
        <div className="wheel-pointer">‚ñº</div>
        <svg
          className={`wheel ${isSpinning ? 'spinning' : ''} ${isFineTuning ? 'fine-tuning' : ''}`}
          width="400"
          height="400"
          viewBox="0 0 300 300"
          style={{ transform: `rotate(${rotation}deg)` }}
        >
          {totalSectors === 0 ? (
            // –ü—É—Å—Ç–æ–π –±–∞—Ä–∞–±–∞–Ω
            <g>
              <circle
                cx="150"
                cy="150"
                r="140"
                fill="#f3f4f6"
                stroke="#d1d5db"
                strokeWidth="2"
              />
              <text
                x="150"
                y="150"
                textAnchor="middle"
                dominantBaseline="middle"
                fill="#6b7280"
                fontSize="16"
                fontWeight="bold"
              >
                –î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
              </text>
            </g>
          ) : (
            Array.from({ length: totalSectors }, (_, index) => {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å -90 –≥—Ä–∞–¥—É—Å–æ–≤, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π —Å–µ–∫—Ç–æ—Ä –±—ã–ª —Å–≤–µ—Ä—Ö—É (–ø–æ–¥ —Å—Ç—Ä–µ–ª–æ—á–∫–æ–π)
            const startAngle = ((index * sectorAngle) - 90) * (Math.PI / 180);
            const endAngle = (((index + 1) * sectorAngle) - 90) * (Math.PI / 180);
            
            const x1 = 150 + 140 * Math.cos(startAngle);
            const y1 = 150 + 140 * Math.sin(startAngle);
            const x2 = 150 + 140 * Math.cos(endAngle);
            const y2 = 150 + 140 * Math.sin(endAngle);
            
            const largeArcFlag = sectorAngle > 180 ? 1 : 0;
            
            const pathData = [
              `M 150 150`,
              `L ${x1} ${y1}`,
              `A 140 140 0 ${largeArcFlag} 1 ${x2} ${y2}`,
              `Z`
            ].join(' ');

            const person = people[index];
            const isHighlighted = highlightedSector === index && isSpinning;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–µ–∫—Ç–æ—Ä–∞
            let fillColor;
            if (isHighlighted) {
              fillColor = '#FFD700'; // –ó–æ–ª–æ—Ç–æ–π –ø—Ä–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–µ
            } else if (person?.isSelected) {
              fillColor = '#9ca3af'; // –°–µ—Ä—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            } else {
              fillColor = getSectorColor(index);
            }
            
            return (
              <g key={index}>
                <path
                  d={pathData}
                  fill={fillColor}
                  stroke="#fff"
                  strokeWidth="2"
                  className={isHighlighted ? 'highlighted-sector' : ''}
                  opacity={person?.isSelected ? 0.5 : 1}
                />
                {person && (
                  <text
                    x={150 + 80 * Math.cos((startAngle + endAngle) / 2)}
                    y={150 + 80 * Math.sin((startAngle + endAngle) / 2)}
                    textAnchor="middle"
                    dominantBaseline="middle"
                    fill={person.isSelected ? "#666" : "#333"}
                    fontSize="12"
                    fontWeight="bold"
                    transform={`rotate(${(startAngle + endAngle) / 2 * 180 / Math.PI + 90}, ${150 + 80 * Math.cos((startAngle + endAngle) / 2)}, ${150 + 80 * Math.sin((startAngle + endAngle) / 2)})`}
                  >
                    {person.name.length > 8 ? person.name.substring(0, 6) + '...' : person.name}
                  </text>
                )}
              </g>
            );
          })
          )}
          
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
          <circle
            cx="150"
            cy="150"
            r="30"
            fill="#333"
            stroke="#fff"
            strokeWidth="3"
          />
        </svg>
      </div>
      
      <button
        onClick={spin}
        disabled={people.length < 2 || availablePeople.length === 0 || isSpinning || isFineTuning}
        className={`spin-button ${isSpinning || isFineTuning ? 'spinning' : ''}`}
      >
        {isSpinning 
          ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' 
          : isFineTuning
            ? '–î–æ–∫—Ä—É—á–∏–≤–∞—é...'
            : people.length < 2 
              ? '–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞' 
              : availablePeople.length === 0 
                ? '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—ã–±—Ä–∞–Ω—ã!' 
                : '–ö–†–£–¢–ò–¢–¨!'
        }
      </button>
      
      {availablePeople.length > 0 && (
        <div className="available-count">
          –î–æ—Å—Ç—É–ø–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {availablePeople.length}
        </div>
      )}
      
      {selectedPersonId && (
        <div className="selected-person">
          –í—ã–±—Ä–∞–Ω: <strong>{people.find(p => p.id === selectedPersonId)?.name}</strong>
        </div>
      )}
    </div>
  );
}
